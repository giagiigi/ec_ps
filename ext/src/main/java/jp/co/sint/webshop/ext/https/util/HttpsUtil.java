package jp.co.sint.webshop.ext.https.util;import java.io.InputStream;import java.util.Properties;import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.HttpConnectionManager;import org.apache.commons.httpclient.HttpStatus;import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;import org.apache.commons.httpclient.cookie.CookiePolicy;import org.apache.commons.httpclient.methods.ByteArrayRequestEntity;import org.apache.commons.httpclient.methods.GetMethod;import org.apache.commons.httpclient.methods.InputStreamRequestEntity;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.methods.RequestEntity;import org.apache.commons.httpclient.params.HttpConnectionManagerParams;import org.apache.commons.httpclient.params.HttpMethodParams;import org.apache.commons.httpclient.protocol.Protocol;import org.apache.commons.httpclient.protocol.ProtocolSocketFactory;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;public class HttpsUtil {    private static final Log logger = LogFactory.getLog(HttpsUtil.class);    public static final String HTTPS_CONF = "cfg/https.conf";    private static final HttpConnectionManager connectionManager;    private static final HttpClient client;    public static int MAX_RESPONSE_LEGNTH = 9999;    static {        Properties p = FileUtil.loadFileAsProperties(HTTPS_CONF, "GBK");    	//// ssl configuration        String keypair = p.getProperty("keypair");        String keypairMgc = p.getProperty("keypair.mgc");        String trust = p.getProperty("trust");        String trustMgc = p.getProperty("trust.mgc");        String maxResponseLength = p.getProperty("https.max.response.length");        if (maxResponseLength != null)            MAX_RESPONSE_LEGNTH = Integer.parseInt(maxResponseLength);        ProtocolSocketFactory socketFactory = new AuthSSLProtocolSocketFactory(                keypair, keypairMgc, trust, trustMgc);        Protocol.registerProtocol("https", new Protocol("https", socketFactory, 443));        // http client configuration        connectionManager = new MultiThreadedHttpConnectionManager();        HttpConnectionManagerParams params = connectionManager.getParams();        params.setConnectionTimeout(Integer.parseInt(p.getProperty("https.connection.timeout")));        params.setSoTimeout(Integer.parseInt(p.getProperty("https.so.timeout")));        params.setStaleCheckingEnabled(Boolean.parseBoolean(p.getProperty("https.stale.check.enabled")));        params.setTcpNoDelay(Boolean.parseBoolean(p.getProperty("https.tcp.no.delay")));        params.setDefaultMaxConnectionsPerHost(Integer.parseInt(p.getProperty("https.default.max.connections.per.host")));        params.setMaxTotalConnections(Integer.parseInt(p.getProperty("https.max.total.connections")));        // disable retry handler        params.setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(0, false));        connectionManager.setParams(params);        client = new HttpClient(connectionManager);    }    public static byte[] post(String url, InputStream content, int contentLength) {    	return post(url, new InputStreamRequestEntity(content, contentLength));    }    public static byte[] post(String url, byte[] content) {		logger.info("Request message:[" + new String(content) + "] to " + url);		byte[] ret = post(url, new ByteArrayRequestEntity(content));		if (ret != null) {		    logger.info("Response message:[" + new String(ret) + "] from " + url);		}    	return ret;    }    public static byte[] post(String url, RequestEntity requestEntity) {        PostMethod method = new PostMethod(url);        method.addRequestHeader("Connection", "Keep-Alive");        method.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);        method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(0, false));        method.setRequestEntity(requestEntity);        try {            int statusCode = client.executeMethod(method);            if (statusCode != HttpStatus.SC_OK) {                logger.warn("Abnormal HTTP Status: " + method.getStatusLine());            }            return method.getResponseBody(MAX_RESPONSE_LEGNTH);        } catch (Exception e) {        	logger.error("[" + url + "] " + e.getMessage() + " <- " + e.getClass().getName());        } finally {            method.releaseConnection();        }        return null;    }    public static byte[] get(String url) {        GetMethod method = new GetMethod(url);        method.addRequestHeader("Connection", "Keep-Alive");        method.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);        method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(0, false));        try {            int statusCode = client.executeMethod(method);            if (statusCode != HttpStatus.SC_OK) {                logger.warn("Abnormal HTTP Status: " + method.getStatusLine());            }            return method.getResponseBody(MAX_RESPONSE_LEGNTH);        } catch (Exception e) {            logger.error("[" + url + "] " + e.getMessage() + " <- " + e.getClass().getName());        } finally {            method.releaseConnection();        }        return null;    }            public static void main(String[] args) throws InterruptedException {    	/* while(true){            Thread.sleep(1000);            byte[] response = post("https://172.17.233.159:22004/merchant_tool","Hello".getBytes());            System.out.println(new String(response));        }*/            	String demo = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><cupMobile application=\"UPNoCards\" version=\"1.01\" xmlns=\"http://www.chinaunionpay.com/cupMobile\"><transaction type=\"Query.MPReq\"><merchant id=\"123456789022222\"/><order id=\"14552801\"/><generateTime>20130108174100</generateTime><transType>Purchase</transType></transaction></cupMobile>";        byte[] response = post("https://58.246.226.97:9019/mpi_pm",demo.getBytes());        System.out.println(new String(response));             }}